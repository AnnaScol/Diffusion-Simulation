%% Simulate Random Walk for n Particle that Starts at Origin in 2D
clear all; clc; close all; % clean up

num_particle      = 1000; 
START_TIME        = 0; %sec
STOP_TIME         = 1; %sec
movements_per_sec = 20;
dt = (STOP_TIME-START_TIME)/movements_per_sec;
numberOfSteps = (STOP_TIME-START_TIME)*movements_per_sec;


% rnd = (randn(3,nSpins)-0.5)*sqrt(2*1*D*dt);
D = 3e-9;
n = 1;
rand_x_steps = (randn((STOP_TIME-START_TIME)*movements_per_sec,num_particle))*sqrt(2*n*D*(dt));

xCoords = zeros((STOP_TIME-START_TIME)*movements_per_sec,num_particle); %particle start loc is assume 0,0
time = (1:size(rand_x_steps,1))*dt;

% loop through all steps
% TO DO:
    % - set a radius
    
  
nTests = 100;
resultStorage = zeros(nTests,(STOP_TIME-START_TIME)*movements_per_sec,num_particle);

for test = 1:nTests
    disp(test);
    rand_x_steps = (randn((STOP_TIME-START_TIME)*movements_per_sec,num_particle))*sqrt(2*n*D*dt);
    for step = 2:numberOfSteps
        for idx = 1:num_particle
                % x-loc
                xCoords(step, idx) = xCoords(step-1, idx) + rand_x_steps(step,idx);%x1

            % - two particles cannot exist at same point    
            if idx > 1

                %checker_vec will be set to 1 where they match
                checker_vec = zeros(1,idx);
                all_zeros =  zeros(1,idx);
                
            end %end of idx > 1
        end %end of idx
    end
    resultStorage(test,:,:) = xCoords;
end


%% Plotting avg walk for particles

% figure; hold on
avg_resultStorage = squeeze(mean(resultStorage,1));
% for particle = 1:num_particle
%     plot(time,avg_resultStorage(:,particle),'Color', rand(1,3), 'MarkerSize', 9);
%     hold on; 
% end
% line(xlim, [0,0], 'Color', 'k', 'LineWidth', 1);
% line([0,0], ylim, 'Color', 'k', 'LineWidth', 1);
% hold off

% Calculate the distance from the origin.
distancesFromOrigin = avg_resultStorage(end,:);
% 
% figure;
% histObject = histogram(distancesFromOrigin, 25);
% grid on;
% caption = sprintf('Distribution of %d Final Distances', num_particle);
% title(caption);
% xlabel('Distance');ylabel('Count');
%%
% calculate the mean square displacement
square_displacement = zeros(nTests,num_particle);

for j = 1:nTests
    for i = 1:num_particle
        square_displacement(j,i) = (resultStorage(j,end,i) - 0)^2;
     
    end
end

%calc the mean
MSD = mean(square_displacement);

figure;
histObject = histogram(MSD, 40);
grid on;
caption = sprintf('Distribution of %d Final Distances', num_particle);
title(caption);
xlabel('Distance');ylabel('Count');


%% 

